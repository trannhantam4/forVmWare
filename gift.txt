

import java.io.*;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) {
        InputReader in = new InputReader(System.in);
        int testcases = in.nextInt();

        for (int i = 0; i < testcases; i++) {
            int nGifts = in.nextInt();
            Map<Long, Integer> gifts = new HashMap<>();
            long result = 0;
            for (int j = 0; j < nGifts; j++) {
                long price = in.nextInt();
                if (!gifts.containsKey(price)) {
                    gifts.put(price, 1);
                } else {
                    gifts.put(price, gifts.get(price) + 1);
                }
            }
            for (long key: gifts.keySet()) {
                result += ((long) gifts.get(key) * (gifts.get(key) - 1)) / 2;
            }
            System.out.println(result);
        }

    }
//abcdef
    static class InputReader {
        StringTokenizer tokenizer;
        BufferedReader reader;
        String token;
        String temp;

        public InputReader(InputStream stream) {
            tokenizer = null;
            reader = new BufferedReader(new InputStreamReader(stream));
        }

        public InputReader(FileInputStream stream) {
            tokenizer = null;
            reader = new BufferedReader(new InputStreamReader(stream));
        }

        public String nextLine() throws IOException {
            return reader.readLine();
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    if (temp != null) {
                        tokenizer = new StringTokenizer(temp);
                        temp = null;
                    } else {
                        tokenizer = new StringTokenizer(reader.readLine());
                    }
                } catch (IOException e) {
                }
            }
            return tokenizer.nextToken();
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }
    }
}

